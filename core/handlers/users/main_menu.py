from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.filters.all_filters import ChatTypeFilter
from core.keyboards.default.user_keyboard import main_menu, back_button
from core.keyboards.inline.all_inline import settings_button, view_favourite_products
from core.states.all_states import Registration, MainMenu, SearchProduct, ChangeCity
from core.utils.db_api.api_sqlite import add_user, get_information
from core.utils.other_functions import get_translated_city, create_user_info
from core.utils.parser_edadeal.parser_requests import get_city_info

router = Router()


@router.message(ChatTypeFilter(chat_type='private'), Registration.write_city)
async def registration_city(message: Message, state: FSMContext):
    user_city = message.text.lower().strip().replace(' ', '-').replace('—ë', '–µ')
    translated_city = await get_translated_city(user_city)
    if translated_city is not None:
        city_info = await get_city_info(translated_city)
        if city_info is not None:
            await message.answer(
                text=f'<b>‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.',
                reply_markup=main_menu)
            user_name = message.from_user.full_name
            user_login = message.from_user.username
            add_user(message.from_user.id, user_login, user_name,
                     datetime.now().strftime("%d.%m.%Y %H:%M:%S"), user_city.title(), translated_city,
                     city_info['geoId'], city_info['center']['lat'], city_info['center']['lng'])
            await state.set_state(MainMenu.main_page)
        else:
            await message.answer(text=f'‚ùó–î–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚ùó\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
    else:
        await message.answer(text=f'<b>‚ùó–û—à–∏–±–∫–∞</b>\n\n–î–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(ChatTypeFilter(chat_type='private'), MainMenu.main_page, F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def open_profile_page(message: Message):
    info = await create_user_info(message.from_user.id)
    await message.answer(text=info, reply_markup=settings_button)


@router.callback_query(MainMenu.main_page, F.data == 'edit_city')
async def edit_user_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        text='<b>‚öô–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥!\n–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞',
        reply_markup=back_button)
    await state.set_state(ChangeCity.write_new_city)


@router.message(ChatTypeFilter(chat_type='private'), MainMenu.main_page, F.text == 'üîç –ü–æ–∏—Å–∫')
async def start_search(message: Message, state: FSMContext):
    await message.answer('<b>üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n'
                         '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!',
                         reply_markup=back_button)
    await state.set_state(SearchProduct.write_name_product)


@router.message(ChatTypeFilter(chat_type='private'), MainMenu.main_page, F.text == '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
async def get_favourite_products(message: Message):
    favourites_products = get_information('users_favorites', user_id=message.from_user.id)['favourites_products']
    favourites_products = [] if favourites_products is None or favourites_products == '' else favourites_products.split(
        ';')
    if len(favourites_products) == 0:
        await message.answer('<b>‚ùï–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–º"</b>\n\n'
                             '–ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ü–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –Ω–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç —Å–∫–∏–¥–∫–∏,'
                             ' —Ç–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",'
                             ' –∏, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∞–∫—Ü–∏–∏, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')
    else:
        await message.answer('<b>‚≠ê–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>',
                             reply_markup=await view_favourite_products(favourites_products))


@router.message(ChatTypeFilter(chat_type='private'), F.text == '‚óÄ –ù–∞–∑–∞–¥')
async def back_to_main_menu(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == SearchProduct.write_name_product or current_state == SearchProduct.choose_market:
        await message.answer(text='<b>‚Ü™–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...</b>',
                             reply_markup=main_menu)
        await state.set_state(MainMenu.main_page)
    elif current_state == ChangeCity.write_new_city:
        info = await create_user_info(message.from_user.id)
        await message.answer(
            text='<b>‚Ü™–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å...</b>',
            reply_markup=main_menu)
        await message.answer(
            text=info,
            reply_markup=settings_button)
        await state.set_state(MainMenu.main_page)
