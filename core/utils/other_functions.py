import json

from transliterate import translit

from core.utils.db_api.api_sqlite import get_information


async def get_translated_city(name_city: str):
    with open('core/utils/russian-cities.json', 'r', encoding='utf-8') as f:
        russian_cities = json.load(f)
        for city in russian_cities:
            city_name = city['name'].lower().replace('—ë', '–µ')
            if city_name == name_city:
                translated_city = translit(city_name, reversed=True)
                return translated_city
        return None


async def transform_markets(markets):
    string_all_markets = '<b>üõí–ú–∞–≥–∞–∑–∏–Ω—ã:</b>\n\n'
    count = 1
    for market in markets:
        string_all_markets += str(count) + '. ' + market['name'].capitalize() + "\n"
        count += 1
    string_all_markets += '\n–î–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ!'
    return string_all_markets


async def get_market_id(markets, name_market):
    if name_market.isdigit():
        if 1 <= int(name_market) <= len(markets):
            return markets[int(name_market) - 1]['uuid']
    else:
        for market in markets:
            if market['name'].lower() == name_market.lower():
                return market['uuid']
    return None


async def create_product_info(product_info) -> str:
    discount = f'{product_info["discount"]}%' if isinstance(product_info['discount'], int) else product_info[
        "discount"]
    price_before = f'<s>{product_info["priceBefore"]}</s>' if product_info[
                                                                  'priceBefore'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞' else '<code>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞</code>'
    weight = f'{product_info["weight"]}{product_info["unitOfMeasurement"]}' if isinstance(product_info['weight'],
                                                                                          float) else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    info = f"–ü—Ä–æ–¥—É–∫—Ç: <code>{product_info['name']}</code>" \
           f"\n–í–µ—Å: <code>{weight}</code>" \
           f"\n–¶–µ–Ω–∞ –¥–æ –∞–∫—Ü–∏–∏: {price_before}" \
           f"\n–¶–µ–Ω–∞ –ø–æ –∞–∫—Ü–∏–∏: <code>{product_info['priceAfter']}</code>" \
           f"\n–°–∫–∏–¥–∫–∞: <code>{discount}</code>" \
           f"\n–°—Ä–æ–∫ –∞–∫—Ü–∏–∏: <code>{product_info['date']}</code>" \
           f"\n–ú–∞–≥–∞–∑–∏–Ω: <code>{product_info['shopName']}</code>"
    return info


async def create_user_info(user_id):
    user_info = get_information('users_info', user_id=user_id)
    user_city = get_information('users_cities', user_id=user_id)
    info = f'<b>üë§–ü—Ä–æ—Ñ–∏–ª—å:</b>\n\n' \
           f'üíé–õ–æ–≥–∏–Ω: <code>{user_info["user_login"]}</code>\n' \
           f'üïê–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{user_info["registration_date"]}</code>\n' \
           f'üè¢–ì–æ—Ä–æ–¥: <code>{user_city["name_city"]}</code>\n' \
           f'‚≠ê–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <code>{user_info["number_selected_products"]} –∏–∑ 3</code>'
    return info


async def create_wth_discount_info(user_id, product_name):
    favourites_products = get_information('users_favorites', user_id=user_id)['favourites_products']
    text = f'‚ùï<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ—Ç —Å–∫–∏–¥–æ–∫</b>\n\n' \
           f'–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{product_name}</code>\n\n'
    flag = True
    if favourites_products is not None:
        favourites_products = favourites_products.split(';')
        if len(favourites_products) < 3:
            if product_name in favourites_products:
                text += '–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–º", ' \
                        '–∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∞–∫—Ü–∏–∏, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!'
                flag = False
            else:
                text += f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",' \
                        f' –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∞–∫—Ü–∏–∏, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!'
        else:
            text += '–£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"'
            flag = False
    else:
        text += f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ "‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",' \
                f' –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∞–∫—Ü–∏–∏, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!'
    return text, flag


async def clear_firstname(firstname: str) -> str:
    if "<" in firstname:
        firstname = firstname.replace("<", "*")
    if ">" in firstname:
        firstname = firstname.replace(">", "*")
    return firstname
